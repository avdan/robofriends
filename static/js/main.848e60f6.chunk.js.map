{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/CounterButton.js","Components/Header.js","Containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","CardList","cardComponent","robots","map","user","i","key","SearchBox","searchField","searchChange","console","log","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","nestState","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.848e60f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardComponent = robots.map((user, i) => {\r\n    return <Card key={i} id={user.id} name={user.name} email={user.email} />;\r\n  });\r\n  return <div>{cardComponent};</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  console.log('SearchBox');\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '5px solid black',\r\n        height: '500px',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooups. That is not good.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\n\r\nclass CounterButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  render() {\r\n    console.log('CounterButton');\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends React.Component {\r\n  shouldComponentUpdate(nextProps, nestState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    console.log('Header');\r\n    return (\r\n      <div>\r\n        <h1 className=\"f1\">RoboFriends</h1>;\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport Header from '../Components/Header';\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />;\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n//import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}